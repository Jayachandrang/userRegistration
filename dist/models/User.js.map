{"version":3,"sources":["../../server/models/User.js"],"names":["schema","mongoose","Schema","email","type","String","required","lowercase","index","unique","passwordHash","firstname","username","lastname","gender","country","timestamps","methods","isValidPassword","password","bcrypt","compareSync","setPassword","hashSync","generateJWT","jwt","sign","keys","JWT_SECRET","toAuthJSON","token","plugin","uniqueValidator","message","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAMA,SAAS,IAAIC,mBAASC,MAAb,CACb;AACEC,SAAO;AACLC,UAAMC,MADD;AAELC,cAAU,IAFL;AAGLC,eAAW,IAHN;AAILC,WAAO,IAJF;AAKLC,YAAQ;AALH,GADT;AAQEC,gBAAc,EAAEN,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EARhB;AASEK,aAAU,EAAEP,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EATZ;AAUEM,YAAS,EAAER,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAVX;AAWEO,YAAS,EAAET,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAXX;AAYEQ,UAAO,EAAEV,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAZT;AAaES,WAAQ,EAAEX,MAAMC,MAAR,EAAgBC,UAAU,IAA1B;AAbV,CADa,EAgBb,EAAEU,YAAY,IAAd,EAhBa,CAAf;;AAmBAhB,OAAOiB,OAAP,CAAeC,eAAf,GAAiC,SAASA,eAAT,CAAyBC,QAAzB,EAAmC;AAClE,SAAOC,mBAAOC,WAAP,CAAmBF,QAAnB,EAA6B,KAAKT,YAAlC,CAAP;AACD,CAFD;;AAIAV,OAAOiB,OAAP,CAAeK,WAAf,GAA6B,SAASA,WAAT,CAAqBH,QAArB,EAA+B;AAC1D,OAAKT,YAAL,GAAoBU,mBAAOG,QAAP,CAAgBJ,QAAhB,EAA0B,EAA1B,CAApB;AACD,CAFD;;AAKAnB,OAAOiB,OAAP,CAAeO,WAAf,GAA6B,SAASA,WAAT,GAAuB;AAClD,SAAOC,uBAAIC,IAAJ,CACL;AACEvB,WAAO,KAAKA,KADd;AAEEQ,eAAW,KAAKA;AAFlB,GADK,EAKLgB,eAAKC,UALA,CAAP;AAOD,CARD;;AAWA5B,OAAOiB,OAAP,CAAeY,UAAf,GAA4B,SAASA,UAAT,GAAsB;AAChD,SAAO;AACL1B,WAAO,KAAKA,KADP;AAELQ,eAAW,KAAKA,SAFX;AAGLE,cAAW,KAAKA,QAHX;AAILiB,WAAO,KAAKN,WAAL;AAJF,GAAP;AAMD,CAPD;;AASAxB,OAAO+B,MAAP,CAAcC,iCAAd,EAA+B,EAAEC,SAAS,6BAAX,EAA/B;;kBAEehC,mBAASiC,KAAT,CAAe,MAAf,EAAuBlC,MAAvB,C","file":"User.js","sourcesContent":["import mongoose from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport keys from \"../config/keys\";\nimport uniqueValidator from \"mongoose-unique-validator\";\n\n// TODO: add uniqueness and email validations to email field\nconst schema = new mongoose.Schema(\n  {\n    email: {\n      type: String,\n      required: true,\n      lowercase: true,\n      index: true,\n      unique: true\n    },\n    passwordHash: { type: String, required: true },\n    firstname:{ type: String, required: true },\n    username:{ type: String, required: true },\n    lastname:{ type: String, required: true },\n    gender:{ type: String, required: true },\n    country:{ type: String, required: true },\n  },\n  { timestamps: true }\n);\n\nschema.methods.isValidPassword = function isValidPassword(password) {\n  return bcrypt.compareSync(password, this.passwordHash);\n};\n\nschema.methods.setPassword = function setPassword(password) {\n  this.passwordHash = bcrypt.hashSync(password, 10);\n};\n\n\nschema.methods.generateJWT = function generateJWT() {\n  return jwt.sign(\n    {\n      email: this.email,\n      firstname: this.firstname,\n    },\n    keys.JWT_SECRET\n  );\n};\n\n\nschema.methods.toAuthJSON = function toAuthJSON() {\n  return {\n    email: this.email,\n    firstname: this.firstname,\n    lastname : this.lastname,\n    token: this.generateJWT()\n  };\n};\n\nschema.plugin(uniqueValidator, { message: \"This email is already taken\" });\n\nexport default mongoose.model(\"User\", schema);"]}